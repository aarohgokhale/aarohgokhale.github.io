---
title: "The NixOS Dual Boot Nightmare"
date: 2024-12-19T00:01:00-06:00
summary: Dual booting NixOS with another linux distro has been a major pain point for me when trying out this OS for the first time. Here I go into why it is so inconvenient to set up dual booting in NixOS.
---

[[/nixos.png]]

I recently installed [[https://nixos.org/][NixOS]] on a small 180 GiB partition on my SSD in order to get a taste of what this "trendy" (of course, by the time I installed NixOS, the peak of its hype online was several months in the past) distribution had to offer. The idea of a declarative package management style does seem quite intriguing, since it means that your operating system configuration, including the packages you want installed and even the subconfigurations of those packages, could be stored in a single file that could conveniently be moved around different machines, allowing you to immediately get going on any new NixOS installation in /minutes/. This seems to be of great practical use and much simpler than the usual process of installing a linux distribution,  and then installing all the necessary packages one by one. That process is slow, tedious, and prone to error. You'll often forget to install a small package, like [[https://gitlab.com/chinstrap/gammastep][gammastep]], for example, and go for days on end without realizing that you are destroying your sleep because of the blue light coming from the screen. Of course, I'm sure there's a way to streamline this process so that it's less tedious and less prone to error, but it would probably take more work than learning how to use NixOS. NixOS also comes with a full blowing programming language, Nix, so perhaps it could pay dividends if one learns how to use it.

While the concept of NixOS sounds very interesting and innovative, the actual experience hasn't been smooth, to say the least. Upon installation, I decided to install all my favorite software like emacs, neovim, sway, and kitty. So far, so good—though I would've liked it if they had bundled in some vi-like editor with the installation, since vim motion diehards like me can't seem to edit anything without them; they included /firefox/ for crying out loud. I did run into several issues while trying to get emacs to run with my config files, though I don't know whether to blame that on emacs or NixOS, so I will give it the benefit of the doubt. The next step was to make it easy to boot into either Arch or NixOS as I wished, since I still planned to mainly use Arch, which did have the significantly larger partition. Initially, NixOS installed [[https://systemd.io/BOOT/][systemd-boot]], which did not have an entry for Arch. I then booted into Arch and reconfigured [[https://www.gnu.org/software/grub/][grub]], hoping to get a NixOS entry. No luck. I looked at the =/boot/= directory, which is where my EFI partition was mounted. Aha! NixOS stores its kernel and [[https://en.wikipedia.org/wiki/Initial_ramdisk][initrd]] in a separate directory in =/boot/= called =/boot/kernels/=. Perhaps this is why the simple command =grub-mkconfig -o /boot/grub/grub.cfg= didn't find the NixOS kernel. I tried to find simple ways to configure grub to look for kernels in a specific directory to no avail—call it a skill issue. I then used my laptop's boot menu to start the previously installed =systemd-boot= instead and booted into NixOS to see whether I could configure the dual boot from there instead. First, I removed the line that enabled systemd-boot. After reading some forums and blogs online, I found out a configuration that was suggested to work:

#+CAPTION: Credit: [[https://www.codyhiar.com/blog/how-to-dual-boot-nixos-and-arch-linux/]]
#+begin_src nix
boot.loader = {
  grub = {
    device = "nodev";
    enable = true;
    useOSProber = true;
    efiSupport = true;
  };
  efi.canTouchEfiVariables = true;
};
#+end_src

This configuration did seem to work initially, since when I looked at the menu entries in =/boot/grub/grub.cfg= there was an entry created for Arch linux with a seemingly correct path to the kernel and initramfs. But when I tried to boot into Arch through its menu entry in grub, I got an error that said that the linux kernel image could not be found. This really confused me, so I went back into NixOS and tried to rebuild the configuration again. The Arch entry was generated according to the stdout of =nixos-rebuild=, so I didn't bother to check =/boot/grub/grub.cfg=. When I rebooted and pressed enter on the entry for Arch, it didn't panic because it couldn't find a kernel. It seemed to be working! ...and it booted into NixOS. Wait, what??! As is turned out, while the output of =nixos-rebuild= /did/ say that Arch linux was found on the correct partition, it wrote the menu entry for Arch with the kernel for NixOS! Why though? I still don't know the answer, but one possible explanation is that for some reason it just blindly looked in the =/boot/kernels/= directory and used whatever kernel it found. I don't even think this theory makes that much sense, but its all I have for now. Based on this theory, I decided to try putting my Arch kernel and initramfs in the =/boot/kernels/= directory—without backing it up. Big Mistake! As soon as I ran =nixos-rebuild=, NixOS saw those extra files and decided that they were garbage due for cleaning, and erased them. I guess it makes sense, since without some sort of garbage cleaning hook, we might get a situation like Gentoo, where the kernel images just keep piling up in your =/boot/= directory until it becomes impossible to navigate, at which point you have to clean it up manually.

Now I was left with no way to immediately boot into my Arch installation. I created a live USB with the standard Arch installation ISO, chrooted into my partition, installed the kernel again, and ran =grub-mkconfig= for good measure. I booted into Arch and stopped using NixOS for a few days to just focus on my studies. When I returned to NixOS, I decided to try one more thing: I deleted my =/boot/grub/grub.cfg= file and ran =nixos-rebuild --install-bootloader switch=. Viola! The new =grub.cfg= file did indeed have an entry for Arch with the correct kernel and initramfs, just like it did when I initially installed grub on NixOS. Once again, I rebooted and pressed enter on the Arch menu entry. This time, instead of saying that the kernel image couldn't be found, it said that the initramfs couldn't found. I thought this was extraordinarily strange. Once again, I booted into NixOS and tried running =nixos-rebuild=. Again, however, it replaced the Arch kernel with the NixOS kernel in the menu entry for Arch. So I deleted =grub.cfg= /again/ and ran =nixos-rebuild=, and rebooted. It finally worked! I was booted into Arch. I still had no idea what was causing NixOS to overwrite the Arch kernel with NixOS kernel when the =grub.cfg= file existed before rebuilding the system.

After forgetting about this issue and going back to configuring my NixOS install, I decided it was time to rebuild the system again to make my new changes (mainly to the display manager) current. Once again, =grub.cfg= was overwritten to have the Arch kernel replaced by the NixOS kernel. This was incredibly frustrating. This meant that no matter what, every time I wanted to rebuild my system, I was forced to delete =grub.cfg= and rebuild it again to get the menu entries correctly configured. I did some more searching but couldn't find anything at all about =grub.cfg= being written incorrectly when dual booting. I also found a forum post that claimed that =os-prober= only worked to detect Windows on NixOS, and it was therefore advisable to use systemd-boot instead if you wanted to dual boot with another linux distribution. Searching for solutions for dual booting with systemed-boot was a mostly unsuccessful endeavor, and I ended up finding some hacky solutions that required manually adding the efi entry for Arch to the systemd-boot menu which I didn't feel like doing. There is also the solution of just using F9 to go into the boot menu and manually starting either OS from a separate bootloader, but this isn't ideal because timing the F9 key press and then waiting for it to slowly load into the UEFI boot menu is just annoying.

On a slightly different note, trying to get NixOS to disable display managers has also been really frustrating. When I disable sddm, it automatically falls back on lightdm. When I try to disable the display manager service as a whole, it does not work. When I try to use the recommended method of suppressing display managers, which is to set =startx= as your display manager in the configuration, it still starts lightdm. I have currently given up on this and just gone back to using sddm, which comes with its own issues on NixOS, for example being unable to login if I type on the sddm login screen on my external monitor instead of my laptop monitor. 

Overall, I have certainly had more pleasant experiences when setting up and using other distributions for the first time. Fedora, for example, didn't give me nearly as much trouble. I get it, though, NixOS is still more of an experimental distro with a small user base and patchy documentation. The core idea is still interesting, and I do see a good use case for it. I don't think I'll be daily driving it any time soon, but I will keep experimenting with it, and maybe eventually consider moving to it once I'm satisfied with my own knowledge of it and with the maturity of the community, documentation, and software ecosystem. I would definitely recommend trying out NixOS, even just within a VM, to get a feeling for what this paradigm of package management has to offer.
